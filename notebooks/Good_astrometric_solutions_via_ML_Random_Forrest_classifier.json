{"paragraphs":[{"text":"%md\n\n# Using ML to define an astrometrically clean sample of stars\n\n   Follows Gaia EDR3 performance verification paper DPACP-81 (Smart et al.) in classifying astrometric solutions as good or bad\n   via supervised ML. Employs a Random Forrest classifier plus appropriately defined training sets - see\n\n   https://arxiv.org/abs/2012.02061\n  \n   for further details. The work flow implemented here follows closely that described in Section 2, \"GCNS Generation\"\n   (GCNS = Gaia Catalogue of Nearby Stars) and is designed to clean up a 100pc (= nearby) sample.\n\n   <i>Version employing newer, richer dataframe API in pyspark ML</i>\n   \n   <b>IMPORTANT NOTE: </b> current deployment has Spark 2.4.7 installed. That specific version's API is documented here:\n   \n   https://spark.apache.org/docs/2.4.7/ml-classification-regression.html#random-forest-classifier\n   \n   Beware of following on-line message board and other fora posts for help and examples as they more often than not describe and link to different versions, and the API is evolving <i>all the time</i>.\n   \n   ","user":"admin","dateUpdated":"2021-02-09T17:21:49+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1612891309520_1036062545","id":"20201013-131059_546082898","dateCreated":"2021-02-09T17:21:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3850"},{"text":"%spark.pyspark\n\n# this is the set of astrometric features to be used. In reality several iterations of this workflow might be required with an expanded set, and some figure-of-merit,\n# e.g. Gini index, would be used to select those most important to the RF classification - cf. Table A.1 in the GCNS paper.\nastrometric_features = [\n    'parallax_error', \n    'parallax_over_error',\n    'astrometric_sigma_5d_max',\n    'pmra_error',\n    'pmdec_error',\n    'astrometric_excess_noise',\n    'ipd_gof_harmonic_amplitude',\n    'ruwe', \n    'visibility_periods_used',\n    'pmdec',\n    'pmra',\n    'ipd_frac_odd_win',\n    'ipd_frac_multi_peak',\n    'astrometric_gof_al',\n    'parallax_pmdec_corr',\n    'astrometric_excess_noise_sig'\n]\n# ... the last two are included to cross check against the Gini index results presented in the paper.\n\n# quick mode: set an additional predicate filter on random_index here to limit to 1% or 0.1% sampling etc:\nquick_filter = ''#' AND MOD(random_index, 10) = 0'\n# ... to switch this off, simply specify an empty string. But to avoid overloading matplotlib when visualising results, keep this one:\nquick_plot_filter = ' AND MOD(random_index, 25) = 0'\n\n# Default Spark worker configuration cannot atm handle the full dataset - maybe this is (at least part of) the problem:\n# https://stackoverflow.com/questions/25707784/why-does-a-job-fail-with-no-space-left-on-device-but-df-says-otherwise\n\n# reformat the above attribute list into an SQL comma-separated select string\nfeatures_select_string = ('%s, '*(len(astrometric_features) - 1) + '%s ')%tuple(astrometric_features)\n#print (features_select_string)\n\n# Confirmed by Luis Sarro, personal communication: actually we train on ABS(parallax_over_error), see e.g. GCNS paper Figure A.5\nfeatures_select_string = features_select_string.replace('parallax_over_error','ABS(parallax_over_error) AS parallax_over_error')\n\n# photometric consistency predicate - e.g. Evans et al. (2018), Babusiaux et al. (2018) for DR2:\n#photometric_consistency_filter = ' AND phot_bp_rp_excess_factor BETWEEN 1.0 + (0.03 * POW(bp_rp, 2.0)) AND 1.3 + (0.06 * POW(bp_rp, 2.0))'\n# Riello et al. (2020) for EDR3: fgbp_grp defined by Equation 6 and coefficients in Table 2; sig_cstarg defined by Equation 18:\nphotometric_consistency_indicators = \\\n    '1.15436 + 0.033772*bp_rp + 0.032277*bp_rp*bp_rp AS fgbp_grp_0p5, ' + \\\n    '1.162004 + 0.011464*bp_rp + 0.049255*bp_rp*bp_rp -0.005879*bp_rp*bp_rp*bp_rp AS fgbp_grp_0p5_4p0, ' + \\\n    '1.057572 + 0.0140537*bp_rp AS fgbp_grp_4p0, ' + \\\n    '0.0059898 + 8.817481e-12*POW(phot_g_mean_mag, 7.618399) AS sig_cstarg, '\nphotometric_consistency_filter = ' AND (' + \\\n    '(bp_rp < 0.5 AND ABS(phot_bp_rp_excess_factor - fgbp_grp_0p5) < 2.0 * sig_cstarg) OR ' + \\\n    '(bp_rp BETWEEN 0.5 AND 4.0 AND ABS(phot_bp_rp_excess_factor - fgbp_grp_0p5_4p0) < 2.0 * sig_cstarg) OR ' + \\\n    '(bp_rp >= 4.0 AND ABS(phot_bp_rp_excess_factor - fgbp_grp_4p0) < 2.0 * sig_cstarg))'\n# N.B. this \"ultra-clean\" 2-sigma selection loses very faint red objects owing to the GBP photometry issue discussed in Riello et al. (2020), Section 8.1\n# and is done here for simplicity. The GCNS proper uses external (infrared) photometry from 2MASS to define the good training sample.\n\n# define the data source TODO change to the \"official\" location as and when:\ngs_df = sqlContext.read.parquet('file:////user/nch/PARQUET/TESTS/GEDR3/*.parquet')\n\n# register as SQL-queryable \ngs_df.createOrReplaceTempView('gaia_source')\n\n","user":"admin","dateUpdated":"2021-02-09T17:21:49+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1612891309523_-189405518","id":"20201013-131649_1734629667","dateCreated":"2021-02-09T17:21:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3851"},{"text":"%spark.pyspark\n\n# clear any previously cached data in the context (cells may be executed in any order, and out-dated by changes from here onwards)\nsqlContext.clearCache()\n\n# a conservative selection of everything that COULD be within 100pc, including things with measured \n# distances putting them outside the 100pc horizon when their true distances are within, and also including \n# loads of spurious chaff with the wheat of course, plus bad things with significant, unphysical parallaxes:\nraw_sources_df = spark.sql('SELECT source_id, random_index, phot_g_mean_mag, phot_bp_rp_excess_factor, bp_rp, g_rp, parallax, ra, dec, b, ' + photometric_consistency_indicators + features_select_string + ' FROM gaia_source WHERE ABS(parallax) > 8.0')\n\n# cache it for speedy access below (all subsequent samples are derived from this):\nraw_sources_df.cache()\n\n# register as SQL-queryable\nraw_sources_df.createOrReplaceTempView('raw_sources')\n\nraw_sources_df.count()\n# EDR3: 1,724,028 sources in 10min 21sec\n# (cf. GCNS: 1,211,740 sources with varpi > 8mas plus 512,288 sources with varpi < -8 = 1,724,028 in total) ","user":"admin","dateUpdated":"2021-02-09T17:21:49+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1612891309523_-614365049","id":"20201013-132418_278702125","dateCreated":"2021-02-09T17:21:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3852"},{"text":"%spark.pyspark\n\n# plot an observational Hertzsprung-Russell diagram (aka colour / absolute magnitude diagram) for the unclassified sample to show the problem,\n# include the photometric consistency filter to show the problem is astrometric in addition to photometric\nunclassified_camd_df = spark.sql('SELECT phot_g_mean_mag + 5.0*LOG10(parallax/100.0) AS m_g, g_rp FROM raw_sources WHERE parallax > +8.0' + quick_plot_filter)# + photometric_consistency_filter)\n\nimport matplotlib.pyplot as plot\nplot.figure(0, figsize = (9.0, 9.0))\nx = list(unclassified_camd_df.select('g_rp').toPandas()['g_rp'])\ny = list(unclassified_camd_df.select('m_g').toPandas()['m_g'])\nplot.scatter(x, y, marker = '.', s = 1)\nplot.ylim(21.0, -3.0)\nplot.ylabel('Stellar brightness (absolute G magnitude) -->', fontsize = 16)\nplot.xlabel('<-- Stellar temperature (G - RP magnitude)', fontsize = 16)\nplot.show()\n\n","user":"admin","dateUpdated":"2021-02-09T17:21:49+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1612891309524_1915154298","id":"20201120-094650_221463065","dateCreated":"2021-02-09T17:21:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3853"},{"text":"%md\n\nThe problem: while we see astrophysically interesting locii in this diagram, the lower right (cool, low temperature) regime <br> is dominated by systematic errors (not random uncertainties - the data should be equally precise in all parts of this data <br> space) that contaminate the raw sample. We wish to clean the sample to obtain high reliability\n\n* without compromising completeness;\n* utilising astrometric quality features in the raw catalogue for a volume-complete sample;\n* and efficiently; \n\ni.e. without endless iterations of manual, subjective, axis-parallel and arbitrary cuts on available catalogue attributes. A neat solution to this is to use supervised ML. In the Gaia EDR3 performance verification paper \"Gaia Catalogue of Nearby Stars\" (Smart, Sarro, Rybicki, et al. 2020) we use a Random Forest of decision trees on selected features having first defined a training set based on the data itself. \n\nNote that plotting the <i>intrinsic brightness</i> of a star as above requires determination of the <i>distance</i> to it along with a measurement of it's apparent brightness. Stellar distance determination is a fundamental goal of the Gaia mission and is achieved via measurement of the <i>stellar parallax</i>, the apparent \"wobble\" in angular position exhibited by all stars as seen from our (annually changing) view point in the solar system. The sample plotted above is selected for parallax > 8 milliarcseconds (mas) which corresponds to a distance within 125 parsecs (since a star at distance 1 parsec exhibits a parallax of 1 arcsecond; parsec = \"parallax arcsecond\"; 1 parsec is around 3.3 light-years).\n\nAn 8 mas training set of \"good\" examples is \"cleaned\" of highly probable spurious sources using <i>independent</i> photometric criteria, i.e. we require consistency of optical and colours. The \"bad\" examples are selected having (unphysical) parallax < -8 mas, i.e. using parallax measurements that are formally highly significant, yet obviously spurious. Under the assumption of normally distributed uncertainties on the parallax measurements, this bad sample should be representative of the corresponding spurious measurements having parallax > 8 mas that contaminate the parallax-selected sample and, in particular, create the contamination illustrated in the plot above.\n","user":"admin","dateUpdated":"2021-02-09T17:21:49+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1612891309525_-569547969","id":"20201120-110502_1704727157","dateCreated":"2021-02-09T17:21:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3854"},{"text":"%spark.pyspark\n\n# good training data: first define rough positional cuts to exclude crowded regions at low Galactic latitude, and inside the Large and Small Magellanic Clouds (Luri et al. 2020):\nlow_galactic_latitude_filter = ' AND ABS(b) > 25.0'\nsmc_filter = ' AND (dec < -80.0 OR dec > -65.0 OR (ra < 350.0 AND ra > +40.0))'\nlmc_filter = ' AND (dec < -80.0 OR dec > -55.0 OR ra < 40.0 OR ra > 120.0)'\nall_good_training_df = spark.sql('SELECT 1 AS label, ' + features_select_string + ' FROM raw_sources WHERE parallax > + 8.0 AND ABS(b) > 25.0' + photometric_consistency_filter + quick_filter + low_galactic_latitude_filter + smc_filter + lmc_filter)\ngood_training_rows = all_good_training_df.count()\n#print('Good training data size: %d rows'%(good_training_rows))\n\n# bad training data: negative parallaxes: N.B. make a selection exactly the same size as the good training set based on size of smaller (good) data set and count of all available bads\nmaximal_bad_ast_count = spark.sql('SELECT source_id FROM raw_sources WHERE parallax < -8.0').count()\nfilter_factor = int(maximal_bad_ast_count / good_training_rows)\nall_bad_training_df = spark.sql('SELECT 0 AS label, ' + features_select_string + ' FROM raw_sources WHERE  parallax < -8.0 AND MOD(random_index, %d) = 0'%(filter_factor) + ' ORDER BY random_index LIMIT %d'%(good_training_rows))\n#all_bad_training_data_count = all_bad_training_df.count()\n#print ('Bad  training data size: %d rows'%(all_bad_training_data_count))\n","user":"admin","dateUpdated":"2021-02-09T17:21:49+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1612891309525_1101796258","id":"20201123-105445_95907042","dateCreated":"2021-02-09T17:21:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3855"},{"text":"%spark.pyspark\n\n# define training (67%) and test (33%) sample splits (seeded randomness for repeatability)\ngood_67pc, good_33pc = all_good_training_df.randomSplit([0.67, 0.33], 42)\nbad_67pc, bad_33pc = all_bad_training_df.randomSplit([0.67, 0.33], 42)\n\n# transform to labelled feature vectors (0.0 = bad, 1.0 = good, as conveniently already defined in previous projections above)\n\n# Annotate and transform appropriate to the input required by the classifier's API.\n# Need a dataframe with labels and features: use vector assembler. \nfrom pyspark.ml.feature import VectorAssembler\nignore = ['label',]\nassembler = VectorAssembler(inputCols=[x for x in good_67pc.columns if x not in ignore], outputCol='features')\n\n# training sets\ngood_training_df = assembler.transform(good_67pc).drop(*astrometric_features)\nbad_training_df = assembler.transform(bad_67pc).drop(*astrometric_features)\n# ... N.B. the original individual feature columns are dropped to save memory (since they are duplicated into the resulting feature vector).\n\n# testing sets\ngood_testing_df = assembler.transform(good_33pc).drop(*astrometric_features)\nbad_testing_df = assembler.transform(bad_33pc).drop(*astrometric_features)\n\n# concatenate the training set into a single dataframe\ntraining_df = good_training_df.union(bad_training_df)\n#training_df.show()\n","user":"admin","dateUpdated":"2021-02-09T17:21:49+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1612891309525_2003454427","id":"20201015-161110_18118893","dateCreated":"2021-02-09T17:21:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3856"},{"text":"%spark.pyspark\n\n# This cell does the business, given the data and training sets. Follows the example Python code at \n# https://spark.apache.org/docs/2.4.7/api/python/pyspark.ml.html#pyspark.ml.classification.RandomForestClassifier\n\nfrom pyspark.ml.classification import RandomForestClassifier\n\n# instantiate a trained RF classifier, seeded for repeatability at this stage:\nrf = RandomForestClassifier(featureSubsetStrategy = 'sqrt', featuresCol = 'features', labelCol = 'label', numTrees = 500, impurity = 'gini', seed=42)\nmodel = rf.fit(training_df)\n\n# benchmarks: featureSubsetStrategy = \"sqrt\"\n# 10% sample,  100 trees:  3min 58sec (Tues) 7min 57sec (Wed) ...! (DR2)\n#                          2min 36sec (6/01/2021)\n# 100% sample, 5000 trees: barfs after ~1hr:\n# Py4JJavaError: An error occurred while calling o1681.fit.\n#: org.apache.spark.SparkException: Job aborted due to stage failure: Task 5720 in stage 121.0 failed 4 times, most recent failure: Lost task 5720.3 in stage 121.0 (TID 487751, worker03, executor 4): java.io.IOException: No space left on device\n# 100% sample, 500 trees: 1hr 05min 04sec (EDR3)\n","user":"admin","dateUpdated":"2021-02-09T17:21:49+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1612891309526_-983098919","id":"20201013-152110_1282917873","dateCreated":"2021-02-09T17:21:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3857"},{"text":"%spark.pyspark\n\n# classify based on the above trained model\ngood_test_results = model.transform(good_testing_df)\nbad_test_results = model.transform(bad_testing_df)\n\n#good_test_results.show()\n\n\n","user":"admin","dateUpdated":"2021-02-09T17:21:49+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1612891309526_-196999009","id":"20201015-131823_1744793710","dateCreated":"2021-02-09T17:21:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3858"},{"text":"%spark.pyspark\n\n# test results numerical output\n\n# count up\nfrom collections import Counter\npositives = Counter(list(good_test_results.select('prediction').toPandas()['prediction']))\nnegatives = Counter(list(bad_test_results.select('prediction').toPandas()['prediction']))\n\n# Confusion matrix (after GCNS paper, Table 1):\ntrue_positives = positives[1.0]\nfalse_positives = positives[0.0]\ntrue_negatives = negatives[0.0]\nfalse_negatives = negatives[1.0]\nprint('   |%7d%7d'%(1,2))\nprint('------------------------------')\nprint(' 1 |%7d%7d'%(true_positives, false_positives))\nprint(' 2 |%7d%7d'%(false_negatives, true_negatives))\nprint()\n\n# Misclassification fraction: cf. GCNS paper which quotes 0.1%\nnum_misclassified = false_positives + false_negatives\ntotal_num_in_test = true_positives + true_negatives + num_misclassified\nmisclassified_pc = 100.0 * float(num_misclassified) / float(total_num_in_test)\nprint('Misclassifications for the test set: %.2f %%'%(misclassified_pc))\n\n#  10% EDR3 sample, 100 trees: 0.44% misclassifications\n# 100%              500      : 0.38% (in 15min 57sec)","user":"admin","dateUpdated":"2021-02-09T17:21:49+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1612891309526_-1692501088","id":"20201016-154755_24366630","dateCreated":"2021-02-09T17:21:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3859"},{"text":"%spark.pyspark\n\n# examine relative importance of features wrt Appendix A.1 of the GCNS paper\nfeature_relative_importance = model.featureImportances.toArray()\nprint('Relative importance of astrometric features:\\n')\nfor idx in range(len(astrometric_features)): print('%25s  :  %f'%(astrometric_features[idx], feature_relative_importance[idx]))\n","user":"admin","dateUpdated":"2021-02-09T17:21:49+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1612891309527_-1902363780","id":"20201123-163421_1811049882","dateCreated":"2021-02-09T17:21:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3860"},{"text":"%spark.pyspark\n\n# cleaned up CAMD (observational HRD) employing the classifications\n\n# get the complete unclassified sample:\nunclassified_sample_df = spark.sql('SELECT * FROM raw_sources WHERE parallax > +8.0' + quick_filter)\n\n# required features subset for the classification model\nassembler = VectorAssembler(inputCols=[x for x in unclassified_sample_df.columns if x in astrometric_features], outputCol='features')\ndf_to_classify = assembler.transform(unclassified_sample_df)\nall_classifications = model.transform(df_to_classify)\n#all_classifications.show()\n\n# register as SQL-queryable:\nall_classifications.createOrReplaceTempView('classified_sources')\n\n# select on binary classification for a quick check:\ngood_sources_df = spark.sql('SELECT phot_g_mean_mag + 5.0*LOG10(parallax/100.0) AS m_g, g_rp, ra, dec FROM classified_sources WHERE prediction=1.0' + quick_plot_filter)# + photometric_consistency_filter)\nbad_sources_df =  spark.sql('SELECT phot_g_mean_mag + 5.0*LOG10(parallax/100.0) AS m_g, g_rp, ra, dec FROM classified_sources WHERE prediction=0.0' + quick_plot_filter)# + photometric_consistency_filter)\n\nimport matplotlib.pyplot as plot\nplot.figure(1, figsize = (6.0, 9.7))\nx = list(bad_sources_df.select('g_rp').toPandas()['g_rp'])\ny = list(bad_sources_df.select('m_g').toPandas()['m_g'])\nplot.scatter(x, y, marker = '.', s = 1, c = 'orange')\nx = list(good_sources_df.select('g_rp').toPandas()['g_rp'])\ny = list(good_sources_df.select('m_g').toPandas()['m_g'])\nplot.scatter(x, y, marker = '.', s = 1)\nplot.ylim(21.0, -3.0)\nplot.ylabel('Stellar brightness (absolute G magnitude) -->', fontsize = 16)\nplot.xlabel('<-- Stellar temperature (G - RP magnitude)', fontsize = 16)\nplot.show()\n\n\n","user":"admin","dateUpdated":"2021-02-09T17:21:49+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1612891309527_-1023543674","id":"20201123-162249_1468741293","dateCreated":"2021-02-09T17:21:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3861"},{"text":"%spark.pyspark\n\n# histogram of the classification probabilities: cf. GCNS paper Figure 3\n\n#all_classifications.show()\n\nimport matplotlib.pyplot as plot\nplot.figure(1, figsize = (9.7, 6.0))\nplot.yscale('log')\nx = list(all_classifications.select('probability').toPandas()['probability'])\nplot.hist(x, bins=25, color='black')\nplot.xlabel('Random Forest Probability')\nplot.ylabel('N')\n\n","user":"admin","dateUpdated":"2021-02-09T17:21:49+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1612891309528_-645427683","id":"20201124-100512_110153564","dateCreated":"2021-02-09T17:21:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3862"},{"text":"%spark.pyspark\n\n# cf. GCNS paper Figure 1 panels: sky distribution of good/bad sources:\n\nimport math\n\nplot.figure(2, figsize = (16.18, 10.0))\nplot.subplot(111, projection='aitoff')\nplot.grid(True)\nx = list((good_sources_df.select('ra').toPandas()['ra'] - 180.0) * math.pi / 180.0)\ny = list(good_sources_df.select('dec').toPandas()['dec'] * math.pi / 180.0)\nplot.title('Good sources')\nplot.scatter(x, y, marker = '.', s = 1)\n","user":"admin","dateUpdated":"2021-02-09T17:21:49+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1612891309529_-1960517214","id":"20201125-103046_1353183691","dateCreated":"2021-02-09T17:21:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3863"},{"text":"%spark.pyspark\n\nplot.figure(3, figsize = (16.18, 10.0))\nplot.subplot(111, projection='aitoff')\nplot.grid(True)\nx = list((bad_sources_df.select('ra').toPandas()['ra'] - 180.0) * math.pi / 180.0)\ny = list(bad_sources_df.select('dec').toPandas()['dec'] * math.pi / 180.0)\nplot.title('Bad sources')\nplot.scatter(x, y, marker = '.', s = 1)\n","user":"admin","dateUpdated":"2021-02-09T17:21:49+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1612891309534_576367935","id":"20201125-163312_728555601","dateCreated":"2021-02-09T17:21:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3864"},{"text":"%spark.pyspark\nprint(\"No. of good sources: \",good_sources_df.count())\nprint(\"No. of bad sources:  \",bad_sources_df.count())\n","user":"admin","dateUpdated":"2021-02-09T17:21:49+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1612891309537_406165835","id":"20201125-155131_269531128","dateCreated":"2021-02-09T17:21:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3865"},{"text":"%spark.pyspark\n\n# histogram of distribution of parallax_over_error\nimport matplotlib.pyplot as plot\nplot.figure(1, figsize = (9.7, 6.0))\nplot.yscale(\"log\")\nx = list(good_67pc.select(\"parallax_over_error\").toPandas()[\"parallax_over_error\"])\ny = list(bad_67pc.select(\"parallax_over_error\").toPandas()[\"parallax_over_error\"])\nplot.hist(x, bins=25, label='good')\nplot.hist(y, bins=25, label='bad')\nplot.xlabel(\"parallax_over_error\")\nplot.ylabel(\"Frequency\")\nplot.legend(loc='upper right')","user":"admin","dateUpdated":"2021-02-09T17:21:49+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1612891309538_2095277399","id":"20201124-161145_1933006801","dateCreated":"2021-02-09T17:21:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3866"},{"text":"%spark.pyspark\n\n# where are the NULLs in raw_sources features selection?\nfor feature in astrometric_features: print (spark.sql('SELECT COUNT(*) AS ' + feature + '_nulls FROM raw_sources WHERE ' + feature + ' IS NULL').show())\n# scan_direction_strength_k2 is the culprit!\n    \n# alternatively could try:\n#Dict_Null = {col:df.filter(df[col].isNull()).count() for col in df.columns}\n#Dict_Null\n    \n","user":"admin","dateUpdated":"2021-02-09T17:21:49+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1612891309538_1627990471","id":"20201124-171324_1960205489","dateCreated":"2021-02-09T17:21:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3867"},{"text":"%spark.pyspark\n","user":"admin","dateUpdated":"2021-02-09T17:21:49+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1612891309538_-1831347957","id":"20210108-142101_850914828","dateCreated":"2021-02-09T17:21:49+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3868"}],"name":"Good astrometric solutions via ML Random Forrest classifier","id":"2FZQN6PXB","noteParams":{},"noteForms":{},"angularObjects":{},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}
